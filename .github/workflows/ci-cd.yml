# 🚀 CI/CD Pipeline Workflow
#
# This workflow demonstrates a comprehensive CI/CD pipeline:
# - Runs tests and builds on push/PR events
# - Multi-environment testing across Node.js versions
# - Security scanning simulation and code quality checks
# - Deployment pipeline demonstration with multiple stages
# - Performance monitoring and artifact management
#
# 🎯 Perfect example of modern DevOps practices!

name: 🚀 CI/CD Pipeline

# 🚀 Trigger conditions
on:
  push:
    branches: [main, develop]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  pull_request:
    branches: [main, develop]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  workflow_dispatch:  # 🎮 Manual trigger for demos

# 🌍 Environment variables
env:
  NODE_VERSION_MATRIX: '[16, 18, 20]'
  DEPLOY_ENVIRONMENT: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}

# 🔧 Workflow jobs
jobs:
  # 🔍 Pre-flight checks
  pre-flight:
    name: 🔍 Pre-flight Checks
    runs-on: ubuntu-latest
    outputs:
      should_run_tests: ${{ steps.changes.outputs.should_run_tests }}
      deploy_environment: ${{ steps.env.outputs.deploy_environment }}
      
    steps:
      # 📥 Checkout code
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
          
      # 🔍 Analyze changes
      - name: 🔍 Analyze Code Changes
        id: changes
        run: |
          echo "🔍 Analyzing changes to determine test requirements..."
          
          # 📊 Check if we need to run tests based on file changes
          if git diff --name-only HEAD~1 HEAD | grep -E '\.(js|ts|json)$' > /dev/null; then
            echo "should_run_tests=true" >> $GITHUB_OUTPUT
            echo "✅ JavaScript/TypeScript files changed - tests required"
          else
            echo "should_run_tests=false" >> $GITHUB_OUTPUT
            echo "ℹ️ No JavaScript/TypeScript files changed - skipping tests"
          fi
          
      # 🌍 Set environment context
      - name: 🌍 Set Environment Context
        id: env
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "deploy_environment=production" >> $GITHUB_OUTPUT
            echo "🚀 Production deployment context"
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "deploy_environment=staging" >> $GITHUB_OUTPUT
            echo "🧪 Staging deployment context"
          else
            echo "deploy_environment=review" >> $GITHUB_OUTPUT
            echo "👀 Review deployment context"
          fi
          
  # 🧪 Testing Matrix Job
  test:
    name: 🧪 Test Suite (Node.js ${{ matrix.node-version }})
    runs-on: ${{ matrix.os }}
    needs: pre-flight
    if: needs.pre-flight.outputs.should_run_tests == 'true'
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [16, 18, 20]
        # 🎯 Allow some failures for experimental setups
        include:
          - os: ubuntu-latest
            node-version: 21
            experimental: true
        exclude:
          # 💾 Reduce matrix size for faster execution in demo
          - os: windows-latest
            node-version: 16
          - os: macos-latest
            node-version: 16
            
    continue-on-error: ${{ matrix.experimental == true }}
    
    steps:
      # 📥 Checkout repository
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        
      # 🟢 Setup Node.js
      - name: 🟢 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          
      # 📦 Install dependencies
      - name: 📦 Install Dependencies
        run: |
          echo "📦 Installing dependencies for Node.js ${{ matrix.node-version }}..."
          npm ci
          echo "✅ Dependencies installed successfully"
          
      # 🔍 Lint code
      - name: 🔍 Lint Code
        run: |
          echo "🔍 Running linting checks..."
          npm run lint
          echo "✅ Linting completed"
          
      # 🧪 Run tests
      - name: 🧪 Run Test Suite
        run: |
          echo "🧪 Running comprehensive test suite..."
          npm test
          echo "✅ All tests passed!"
          
      # 🏗️ Build application
      - name: 🏗️ Build Application
        run: |
          echo "🏗️ Building application..."
          npm run build
          echo "✅ Build completed successfully"
          
      # 📊 Performance benchmarks
      - name: 📊 Performance Benchmarks
        run: |
          echo "📊 Running performance benchmarks..."
          echo "🚀 Starting application for benchmark..."
          
          # 🎯 Simple performance test
          timeout 10s npm start > app.log 2>&1 &
          APP_PID=$!
          
          sleep 3
          echo "⏱️ Measuring startup time and memory usage..."
          
          # 📈 Simulate performance metrics
          echo "Startup time: $(( RANDOM % 3 + 1 )).$(( RANDOM % 100 ))s"
          echo "Memory usage: $(( RANDOM % 50 + 100 ))MB"
          echo "Response time: $(( RANDOM % 100 + 50 ))ms"
          
          # 🧹 Cleanup
          kill $APP_PID 2>/dev/null || true
          echo "✅ Performance benchmarks completed"
          
      # 📊 Upload test results
      - name: 📊 Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.os }}-node${{ matrix.node-version }}
          path: |
            test-results/
            coverage/
            app.log
          retention-days: 30
          
  # 🔒 Security Scanning
  security:
    name: 🔒 Security Scanning
    runs-on: ubuntu-latest
    needs: pre-flight
    
    steps:
      # 📥 Checkout code
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        
      # 🟢 Setup Node.js
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          
      # 📦 Install dependencies
      - name: 📦 Install Dependencies
        run: npm ci
        
      # 🔒 Security audit
      - name: 🔒 NPM Security Audit
        run: |
          echo "🔒 Running NPM security audit..."
          npm audit --audit-level=moderate || true
          echo "✅ Security audit completed"
          
      # 🛡️ Dependency check simulation
      - name: 🛡️ Dependency Vulnerability Scan
        run: |
          echo "🛡️ Scanning dependencies for vulnerabilities..."
          
          # 🎯 Simulate security scanning results
          echo "📊 Security Scan Results:"
          echo "├── Critical vulnerabilities: 0"
          echo "├── High vulnerabilities: 0"
          echo "├── Medium vulnerabilities: $(( RANDOM % 3 ))"
          echo "├── Low vulnerabilities: $(( RANDOM % 5 ))"
          echo "└── Total dependencies scanned: $(npm list --depth=0 2>/dev/null | grep -c '├\|└' || echo '0')"
          
          echo "✅ Vulnerability scan completed"
          
      # 🔍 Code quality analysis
      - name: 🔍 Code Quality Analysis
        run: |
          echo "🔍 Running code quality analysis..."
          
          # 📊 Simulate code quality metrics
          echo "📊 Code Quality Metrics:"
          echo "├── Code coverage: $(( RANDOM % 20 + 80 ))%"
          echo "├── Maintainability index: $(( RANDOM % 20 + 80 ))/100"
          echo "├── Technical debt: $(( RANDOM % 10 + 5 )) hours"
          echo "├── Duplicated lines: $(( RANDOM % 5 ))%"
          echo "└── Complexity score: $(( RANDOM % 10 + 1 ))/10"
          
          echo "✅ Code quality analysis completed"
          
  # 🏗️ Build and Package
  build:
    name: 🏗️ Build & Package
    runs-on: ubuntu-latest
    needs: [test, security]
    if: always() && (needs.test.result == 'success' || needs.test.result == 'skipped')
    
    steps:
      # 📥 Checkout repository
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        
      # 🟢 Setup Node.js
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          
      # 📦 Install dependencies
      - name: 📦 Install Dependencies
        run: npm ci
        
      # 🏗️ Production build
      - name: 🏗️ Create Production Build
        run: |
          echo "🏗️ Creating optimized production build..."
          npm run build
          echo "✅ Production build created"
          
      # 📦 Package application
      - name: 📦 Package Application
        run: |
          echo "📦 Packaging application for deployment..."
          
          # 🎯 Create deployment package
          mkdir -p dist/
          cp -r node_modules/ dist/ 2>/dev/null || echo "No node_modules to copy"
          cp package*.json dist/
          cp index.js dist/
          cp -r docs/ dist/ 2>/dev/null || echo "No docs to copy"
          
          # 📊 Package info
          echo "📊 Package Information:"
          echo "├── Package size: $(du -sh dist/ | cut -f1)"
          echo "├── Files included: $(find dist/ -type f | wc -l)"
          echo "├── Build timestamp: $(date)"
          echo "└── Git commit: ${{ github.sha }}"
          
          echo "✅ Application packaged successfully"
          
      # 📤 Upload build artifacts
      - name: 📤 Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/
          retention-days: 90
          
  # 🚀 Deployment Simulation
  deploy:
    name: 🚀 Deploy to ${{ needs.pre-flight.outputs.deploy_environment }}
    runs-on: ubuntu-latest
    needs: [pre-flight, build]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    environment: 
      name: ${{ needs.pre-flight.outputs.deploy_environment }}
      url: https://${{ needs.pre-flight.outputs.deploy_environment }}.example.com
      
    steps:
      # 📥 Download build artifacts
      - name: 📥 Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: ./deploy
          
      # 🚀 Deploy to environment
      - name: 🚀 Deploy Application
        run: |
          ENVIRONMENT="${{ needs.pre-flight.outputs.deploy_environment }}"
          echo "🚀 Deploying to $ENVIRONMENT environment..."
          
          # 🎯 Simulate deployment steps
          echo "📋 Deployment Steps:"
          echo "├── 1. Validating deployment package..."
          sleep 2
          echo "├── 2. Connecting to $ENVIRONMENT servers..."
          sleep 1
          echo "├── 3. Backing up current version..."
          sleep 1
          echo "├── 4. Uploading new version..."
          sleep 3
          echo "├── 5. Running database migrations..."
          sleep 2
          echo "├── 6. Starting application services..."
          sleep 2
          echo "├── 7. Running health checks..."
          sleep 1
          echo "└── 8. Deployment completed successfully!"
          
          echo "✅ Application deployed to $ENVIRONMENT"
          echo "🌐 URL: https://$ENVIRONMENT.example.com"
          
      # 🔍 Post-deployment verification
      - name: 🔍 Post-deployment Verification
        run: |
          echo "🔍 Running post-deployment verification..."
          
          # 📊 Simulate health checks
          echo "📊 Health Check Results:"
          echo "├── Application status: ✅ Running"
          echo "├── Database connectivity: ✅ Connected"
          echo "├── External APIs: ✅ Responding"
          echo "├── Memory usage: $(( RANDOM % 30 + 40 ))%"
          echo "├── CPU usage: $(( RANDOM % 20 + 10 ))%"
          echo "└── Response time: $(( RANDOM % 100 + 50 ))ms"
          
          echo "✅ Post-deployment verification completed"
          
      # 📊 Deployment metrics
      - name: 📊 Record Deployment Metrics
        run: |
          echo "📊 Recording deployment metrics..."
          
          echo "🎯 Deployment Summary:"
          echo "├── Environment: ${{ needs.pre-flight.outputs.deploy_environment }}"
          echo "├── Commit: ${{ github.sha }}"
          echo "├── Branch: ${{ github.ref_name }}"
          echo "├── Triggered by: ${{ github.actor }}"
          echo "├── Deployment time: $(date)"
          echo "└── Status: ✅ Successful"
          
          echo "💾 Metrics recorded for monitoring dashboard"
          
  # 📊 Pipeline Summary
  summary:
    name: 📊 Pipeline Summary
    runs-on: ubuntu-latest
    needs: [pre-flight, test, security, build, deploy]
    if: always()
    
    steps:
      # 📊 Generate pipeline report
      - name: 📊 Generate Pipeline Report
        run: |
          echo "📊 CI/CD Pipeline Summary"
          echo "========================"
          echo "🎯 Pipeline triggered by: ${{ github.event_name }}"
          echo "📋 Branch: ${{ github.ref_name }}"
          echo "👤 Actor: ${{ github.actor }}"
          echo "🕒 Started: ${{ github.event.head_commit.timestamp || github.event.pull_request.created_at }}"
          echo "📍 Commit: ${{ github.sha }}"
          echo ""
          echo "🔍 Job Results:"
          echo "├── Pre-flight: ${{ needs.pre-flight.result }}"
          echo "├── Tests: ${{ needs.test.result || 'skipped' }}"
          echo "├── Security: ${{ needs.security.result }}"
          echo "├── Build: ${{ needs.build.result }}"
          echo "└── Deploy: ${{ needs.deploy.result || 'skipped' }}"
          echo ""
          
          # 🎯 Overall pipeline status
          if [[ "${{ needs.test.result }}" == "failure" || "${{ needs.security.result }}" == "failure" || "${{ needs.build.result }}" == "failure" ]]; then
            echo "❌ Pipeline Status: FAILED"
            echo "💡 Check failed jobs for details"
          elif [[ "${{ needs.deploy.result }}" == "success" ]]; then
            echo "✅ Pipeline Status: DEPLOYED"
            echo "🚀 Application successfully deployed to ${{ needs.pre-flight.outputs.deploy_environment }}"
          else
            echo "✅ Pipeline Status: COMPLETED"
            echo "📋 All checks passed, deployment skipped (not a push to main/develop)"
          fi
          
          echo ""
          echo "🎉 Thanks for contributing to the project!"
          
      # 💬 Comment on PR (if applicable)
      - name: 💬 Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = context.payload.pull_request.number;
            
            // 🎨 Build status summary
            const jobs = {
              'Pre-flight': '${{ needs.pre-flight.result }}',
              'Tests': '${{ needs.test.result || 'skipped' }}',
              'Security': '${{ needs.security.result }}',
              'Build': '${{ needs.build.result }}',
              'Deploy': '${{ needs.deploy.result || 'skipped' }}'
            };
            
            let statusEmoji = '✅';
            let statusText = 'All checks passed!';
            
            for (const [job, result] of Object.entries(jobs)) {
              if (result === 'failure') {
                statusEmoji = '❌';
                statusText = 'Some checks failed';
                break;
              }
            }
            
            const comment = `## ${statusEmoji} CI/CD Pipeline Results
            
            **Status:** ${statusText}
            
            ### 📊 Job Results:
            ${Object.entries(jobs).map(([job, result]) => {
              const emoji = result === 'success' ? '✅' : 
                           result === 'failure' ? '❌' : 
                           result === 'skipped' ? '⏭️' : '🔄';
              return `- ${emoji} **${job}**: ${result}`;
            }).join('\n')}
            
            ### 🎯 Pipeline Details:
            - **Commit**: \`${{ github.sha }}\`
            - **Branch**: \`${{ github.ref_name }}\`
            - **Triggered by**: @${{ github.actor }}
            
            ${statusEmoji === '✅' ? 
              '🎉 Great work! Your changes are ready for review.' : 
              '🔍 Please check the failed jobs and fix any issues.'
            }
            
            ---
            
            > 🤖 **Automated by CI/CD Pipeline** | View details in the [Actions tab](../../actions)`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: comment
            });
            
            console.log(`💬 Posted pipeline summary to PR #${prNumber}`);
            
  # 🧹 Cleanup
  cleanup:
    name: 🧹 Cleanup
    runs-on: ubuntu-latest
    needs: [summary]
    if: always()
    
    steps:
      # 🧹 Cleanup temporary resources
      - name: 🧹 Cleanup Resources
        run: |
          echo "🧹 Cleaning up temporary resources..."
          echo "├── Removing temporary files..."
          echo "├── Clearing caches..."
          echo "└── Cleanup completed"
          
          echo "💡 In a real scenario, this might:"
          echo "  - Clean up test environments"
          echo "  - Remove temporary cloud resources"
          echo "  - Archive old artifacts"
          echo "  - Send notifications"